var searchIndex = JSON.parse('{\
"advent2021":{"doc":"","t":[3,17,6,3,3,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,0,5,12,11,11,0,12,12,12,12,0,12,12,11,11,11,11,11,11,11,11,11,11,17,5,5,5,5,5,5,17,5,5,5,5,5,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,8,13,13,13,13,3,13,13,13,13,13,3,4,13,13,13,13,11,11,11,12,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,0,11,11,11,10,11,11,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,12,12,3,3,12,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,12,5,11,11,11,11,11,11,11,11,5,11,4,3,8,13,8,14,3,3,3,3,3,8,3,3,13,8,8,8,8,6,13,8,8,8,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,12,10,10,10,10,10,10,10,10,10,11,11,11,11,11,12,12,12,12,5,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,10,11,11],"n":["Error","REPETITIONS","Result","RunData","Timing","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","combined","day01","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","load","main","message","new","new","output","part_1","part_1","part_2","part_2","prelude","setup","times","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","YEAR","find_two","part_1","part_2","report","run","data_to_buffer","NUMBER_DASHES","print_day","print_days_timing","print_header","print_part","print_timing","0","0","Black","Blink","Blue","Bold","BrightBlack","BrightBlue","BrightCyan","BrightGreen","BrightMagenta","BrightRed","BrightWhite","BrightYellow","Clear","Color","ColoredString","Colorize","Cyan","Dimmed","Green","Hidden","Instant","Italic","Magenta","Red","Reversed","Strikethrough","Style","Styles","TrueColor","Underline","White","Yellow","add","add_assign","bgcolor","bgcolor","black","blink","blink","blue","bold","bold","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bright_black","bright_blue","bright_cyan","bright_green","bright_magenta","bright_purple","bright_red","bright_white","bright_yellow","checked_add","checked_duration_since","checked_sub","clear","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","color","color","contains","control","cyan","default","deref","dimmed","dimmed","duration_since","elapsed","eq","eq","eq","eq","eq","fgcolor","fgcolor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","green","hash","hidden","hidden","input","into","into","into","into","into","is_plain","italic","italic","magenta","ne","ne","ne","ne","normal","normal","now","on_black","on_blue","on_bright_black","on_bright_blue","on_bright_cyan","on_bright_green","on_bright_magenta","on_bright_purple","on_bright_red","on_bright_white","on_bright_yellow","on_color","on_color","on_cyan","on_green","on_magenta","on_purple","on_red","on_truecolor","on_white","on_yellow","partial_cmp","purple","red","reverse","reverse","reversed","reversed","saturating_duration_since","strikethrough","strikethrough","style","style","sub","sub","sub_assign","to_bg_str","to_fg_str","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","truecolor","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","underline","underline","white","yellow","b","g","r","SHOULD_COLORIZE","ShouldColorize","__private_field","borrow","borrow","borrow_mut","borrow_mut","clicolor","clicolor_force","default","deref","from","from","from_env","has_manual_override","initialize","into","into","manual_override","set_override","set_override","should_colorize","try_from","try_from","try_into","try_into","type_id","type_id","unset_override","unset_override","Alignment","Arguments","Binary","Center","Debug","Debug","DebugList","DebugMap","DebugSet","DebugStruct","DebugTuple","Display","Error","Formatter","Left","LowerExp","LowerHex","Octal","Pointer","Result","Right","UpperExp","UpperHex","Write","align","align","alternate","args","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf","clone","clone","clone_into","clone_into","cmp","debug_list","debug_map","debug_set","debug_struct","debug_tuple","default","description","empty_name","entries","entries","entries","entry","entry","entry","eq","field","field","fields","fill","fill","finish","finish","finish","finish","finish","finish_non_exhaustive","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","has_fields","has_fields","has_key","hash","inner","inner","into","into","into","into","into","into","into","into","into","key","pad","pad_integral","partial_cmp","pieces","precision","precision","result","result","result","sign_aware_zero_pad","sign_minus","sign_plus","state","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","width","width","write","write_char","write_char","write_fmt","write_fmt","write_fmt","write_str","write_str","write_str"],"q":["advent2021","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","advent2021::day01","","","","","","advent2021::load","advent2021::output","","","","","","advent2021::preludeadvent2021::prelude::Color","","","advent2021::prelude::control","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","advent2021::prelude::fmtd":["","","","","","","","","","","","","Day 1: This solution uses a binary mask array that …","","","","","","","","","","","","Load: This module has the code for loading input from file …","","","","","Output: This module collects some of my <code>println!</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The 8 standard colors.","A string that may have color and/or style applied to it.","The trait that enables something to be given color.","","","","","A measurement of a monotonically nondecreasing clock. …","","","","","","A combinatorial style such as bold, italics, dimmed, etc.","","","","","","Panics","","Get the current background color applied.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …","Returns the amount of time elapsed from another instant to …","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …","","","","","","","","","","","","","","","","Check if the current style has one of <code>Styles</code> switched on.","A couple of functions to enable and disable coloring.","","","","","","Returns the amount of time elapsed from another instant to …","Returns the amount of time elapsed since this instant was …","","","","","","Get the current background color applied.","","Utilities for formatting and printing <code>String</code>s.","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if the colored string has no color or styling.","","","","","","","","","","Returns an instant corresponding to “now”.","","","","","","","","","","","","","","","","","","","","","","","","","Historical name of <code>Colorize::reversed</code>. May be removed in a …","","This should be preferred to <code>Colorize::reverse</code>.","","Returns the amount of time elapsed from another instant to …","","","Get the current <code>Style</code> which can be check if it contains a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The persistent <code>ShouldColorize</code>.","A flag to to if coloring should occur.","","","","","","","","","","","","Reads environment variables and checks if output is a tty …","","","","","","Use this to force colored to ignore the environment and …","Use this to force colored to ignore the environment and …","Returns if the current coloring is expected.","","","","","","","Remove the manual override and let the environment decide …","Remove the manual override and let the environment decide …","Possible alignments returned by <code>Formatter::align</code>","This structure represents a safely precompiled version of …","<code>b</code> formatting.","Indication that contents should be center-aligned.","<code>?</code> formatting.","Derive macro generating an impl of the trait <code>Debug</code>.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","Format trait for an empty format, <code>{}</code>.","The error type which is returned from formatting a message …","Configuration for formatting.","Indication that contents should be left-aligned.","<code>e</code> formatting.","<code>x</code> formatting.","<code>o</code> formatting.","<code>p</code> formatting.","The type returned by formatter methods.","Indication that contents should be right-aligned.","<code>E</code> formatting.","<code>X</code> formatting.","A trait for writing or formatting into Unicode-accepting …","Flag indicating what form of alignment was requested.","","Determines if the <code>#</code> flag was specified.","","Get the formatted string, if it has no arguments to be …","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>DebugList</code> builder designed to assist with …","Creates a <code>DebugMap</code> builder designed to assist with …","Creates a <code>DebugSet</code> builder designed to assist with …","Creates a <code>DebugStruct</code> builder designed to assist with …","Creates a <code>DebugTuple</code> builder designed to assist with …","","","","Adds the contents of an iterator of entries to the set …","Adds the contents of an iterator of entries to the list …","Adds the contents of an iterator of entries to the map …","Adds a new entry to the set output.","Adds a new entry to the list output.","Adds a new entry to the map output.","","Adds a new field to the generated struct output.","Adds a new field to the generated tuple struct output.","","Character used as ‘fill’ whenever there is alignment.","","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Marks the struct as non-exhaustive, indicating to the …","Flags for formatting","","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","","","","","","","","","","The <code>format</code> function takes an <code>Arguments</code> struct and returns …","","","","","","","","","","","","","","","","","","","","","","","","","Adds the key part of a new entry to the map output.","This function takes a string slice and emits it to the …","Performs the correct padding for an integer which has …","","","Optionally specified precision for numeric types. …","","","","","Determines if the <code>0</code> flag was specified.","Determines if the <code>-</code> flag was specified.","Determines if the <code>+</code> flag was specified.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds the value part of a new entry to the map output.","Optionally specified integer width that the output should …","","The <code>write</code> function takes an output stream, and an <code>Arguments</code>…","Writes a <code>char</code> into this writer, returning whether the …","","Glue for usage of the <code>write!</code> macro with implementors of …","","Writes some formatted information into this instance.","Writes a string slice into this writer, returning whether …","Writes some data to the underlying buffer contained within …",""],"i":[0,0,0,0,0,1,2,3,1,2,3,3,0,1,1,2,3,1,1,2,3,1,2,3,0,0,1,2,3,0,2,3,2,3,0,3,2,1,1,2,3,1,2,3,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,6,7,6,7,6,6,6,6,6,6,6,6,7,0,0,0,6,7,6,7,0,7,6,6,7,7,0,0,6,7,6,6,4,4,8,8,9,9,8,9,9,8,4,6,5,7,8,4,6,5,7,8,9,9,9,9,9,9,9,9,9,4,4,4,9,8,4,6,5,7,8,4,6,5,7,8,4,9,8,5,0,9,8,8,9,8,4,4,4,6,5,7,8,8,8,0,4,6,5,7,8,8,4,6,6,6,5,7,8,8,6,9,4,9,8,8,4,6,5,7,8,8,9,8,9,4,6,5,8,9,8,4,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,4,9,9,9,8,9,8,4,9,8,8,8,4,4,4,6,6,4,6,5,7,8,8,9,4,6,5,7,8,4,6,5,7,8,4,6,5,7,8,9,8,9,9,10,10,10,0,0,11,12,11,12,11,12,12,12,11,12,11,12,12,11,12,11,12,0,12,12,12,11,12,11,12,11,0,12,0,0,0,13,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,13,0,0,0,14,14,14,15,15,16,17,18,19,20,14,13,21,15,16,17,18,19,20,14,13,21,15,14,21,15,21,15,21,14,14,14,14,14,21,21,17,18,19,20,18,19,20,21,16,17,17,14,14,16,17,18,19,20,16,14,14,22,23,24,25,26,27,28,29,30,13,21,21,15,15,16,17,20,15,0,16,17,18,19,20,14,13,21,15,16,20,20,21,18,19,16,17,18,19,20,14,13,21,15,20,14,14,21,15,14,14,16,17,20,14,14,14,20,21,15,21,15,16,17,18,19,20,14,13,21,15,16,17,18,19,20,14,13,21,15,16,17,18,19,20,14,13,21,15,20,14,14,0,31,14,31,14,14,31,14,14],"f":[null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",6]],null,[[["timing",3],["i64",15]]],[[["duration",3]]],null,null,null,null,null,null,null,null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],[["option",4,["i32"]],["i32",15]]],[[],["result",6]],[[],["result",6]],[[["rundata",3]],["result",6]],[[["string",3]],[["result",6,["rundata"]],["rundata",3]]],[[["string",3]],[["string",3],["result",6,["string"]]]],null,[[["usize",15],["str",15]],["result",6]],[[["vec",3],["vec",3]],["result",6]],[[],["result",6]],[[["usize",15],["str",15]],["result",6]],[[["timing",3]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["duration",3]],["instant",3]],[[["duration",3]]],[[],[["color",4],["option",4,["color"]]]],null,[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[["duration",3]],[["option",4,["instant"]],["instant",3]]],[[["instant",3]],[["duration",3],["option",4,["duration"]]]],[[["duration",3]],[["option",4,["instant"]],["instant",3]]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["instant",3]],[[],["color",4]],[[],["style",3]],[[],["styles",4]],[[],["coloredstring",3]],[[]],[[]],[[]],[[]],[[]],[[["instant",3]],["ordering",4]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[["styles",4]],["bool",15]],null,[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["str",15]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[["instant",3]],["duration",3]],[[],["duration",3]],[[["instant",3]],["bool",15]],[[["color",4]],["bool",15]],[[["style",3]],["bool",15]],[[["styles",4]],["bool",15]],[[["coloredstring",3]],["bool",15]],[[],[["color",4],["option",4,["color"]]]],null,null,[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[["str",15]],["color",4]],[[["string",3]],["color",4]],[[]],[[]],[[]],[[["str",15]],["coloredstring",3]],[[]],[[["str",15]],[["color",4],["result",4,["color"]]]],[[],["coloredstring",3]],[[]],[[],["coloredstring",3]],[[],["coloredstring",3]],null,[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[["instant",3]],["bool",15]],[[["color",4]],["bool",15]],[[["style",3]],["bool",15]],[[["coloredstring",3]],["bool",15]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["instant",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[["u8",15]],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[["instant",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[["instant",3]],["duration",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["style",3]],null,[[["instant",3]],["duration",3]],[[["duration",3]],["instant",3]],[[["duration",3]]],[[],[["cow",4,["str"]],["str",15]]],[[],[["cow",4,["str"]],["str",15]]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[["u8",15]],["coloredstring",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,[[],["shouldcolorize",3]],[[],["shouldcolorize",3]],[[]],[[]],[[],["shouldcolorize",3]],null,[[["should_colorize",3]]],[[]],[[]],null,[[["bool",15]]],[[["bool",15]]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["alignment",4],["option",4,["alignment"]]]],null,[[],["bool",15]],null,[[],[["option",4,["str"]],["str",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["error",3]],[[],["arguments",3]],[[]],[[]],[[["error",3]],["ordering",4]],[[],["debuglist",3]],[[],["debugmap",3]],[[],["debugset",3]],[[["str",15]],["debugstruct",3]],[[["str",15]],["debugtuple",3]],[[],["error",3]],[[],["str",15]],null,[[],["debugset",3]],[[],["debuglist",3]],[[],["debugmap",3]],[[["debug",8]],["debugset",3]],[[["debug",8]],["debuglist",3]],[[["debug",8]],["debugmap",3]],[[["error",3]],["bool",15]],[[["str",15],["debug",8]],["debugstruct",3]],[[["debug",8]],["debugtuple",3]],null,[[],["char",15]],null,[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],["u32",15]],null,[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],null,null,null,null,[[["arguments",3]],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["debug",8]],["debugmap",3]],[[["str",15]],[["result",4,["error"]],["error",3]]],[[["str",15],["bool",15]],[["result",4,["error"]],["error",3]]],[[["error",3]],[["option",4,["ordering"]],["ordering",4]]],null,[[],[["usize",15],["option",4,["usize"]]]],null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["debug",8]],["debugmap",3]],[[],[["usize",15],["option",4,["usize"]]]],null,[[["write",8],["arguments",3]],[["result",4,["error"]],["error",3]]],[[["char",15]],[["result",4,["error"]],["error",3]]],[[["char",15]],[["result",4,["error"]],["error",3]]],[[["arguments",3]],[["result",4,["error"]],["error",3]]],[[["arguments",3]],[["result",4,["error"]],["error",3]]],[[["arguments",3]],[["result",4,["error"]],["error",3]]],[[["str",15]],[["result",4,["error"]],["error",3]]],[[["str",15]],[["result",4,["error"]],["error",3]]],[[["str",15]],[["result",4,["error"]],["error",3]]]],"p":[[3,"Error"],[3,"RunData"],[3,"Timing"],[3,"Instant"],[3,"Style"],[4,"Color"],[4,"Styles"],[3,"ColoredString"],[8,"Colorize"],[13,"TrueColor"],[3,"SHOULD_COLORIZE"],[3,"ShouldColorize"],[4,"Alignment"],[3,"Formatter"],[3,"Arguments"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[8,"Write"]],"a":{"{:?}":[295],"{}":[302]}}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};